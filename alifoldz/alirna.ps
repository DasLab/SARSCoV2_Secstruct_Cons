%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.13
%%CreationDate: Thu Apr  2 17:18:51 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def
% extra definitions for standard anotations
/min { 2 copy gt { exch } if pop } bind def
/BLACK { 0 0 0 } def
/RED   { 1 0 0 } def
/GREEN { 0 1 0 } def
/BLUE  { 0 0 1 } def
/WHITE { 1 1 1 } def
/LabelFont { % font size LabelFont
  exch findfont exch fsize mul scalefont setfont
} bind def
/Label { % i dx dy (text) Label
  % write text at base i plus offset dx, dy
  4 3 roll 1 sub coor exch get aload pop moveto
  3 1 roll fsize mul exch fsize mul exch rmoveto
  show
} bind def
/cmark { % i cmark   draw circle around base i
  newpath 1 sub coor exch get aload pop
  fsize 2 div 0 360 arc stroke
} bind def
/gmark { % i j c gmark
  % draw basepair i,j with c counter examples in gray
  gsave
  3 min [0 0.33 0.66 0.9] exch get setgray
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  grestore
} bind def
/segmark { % f i j lw r g b segmark
  % mark segment [i,j] with outline width lw and color rgb
  % use omark and Fomark instead
  gsave
  setrgbcolor setlinewidth
  newpath
  1 sub exch 1 sub dup
  coor exch get aload pop moveto
  currentdict (cpr) known
  {
    3 -1 roll dup 4 1 roll dup
    {
      3 1 roll dup 3 -1 roll dup
      4 1 roll exch 5 2 roll exch
    }
    {
      3 1 roll exch
    } ifelse
    1 exch { coor exch get aload pop lineto } for
    {
      dup 3 1 roll 1 add exch 1 add arccoords pop pop
      4 2 roll 5 -1 roll coor exch get aload pop curveto
    } if
  }
  {
    exch 1 exch {
      coor exch get aload pop lineto
    } for
  } ifelse
  { closepath fill } if  stroke
  grestore
} bind def
/omark { % i j lw r g b omark
  % stroke segment [i..j] with linewidth lw, color rgb
  false 7 1 roll segmark
} bind def
/Fomark { % i j r g b Fomark
  % fill segment [i..j] with color rgb
  % should precede drawbases
  1 4 1 roll true 7 1 roll segmark
} bind def
/BFmark{ % i j k l r g b BFmark
  % fill block between pairs (i,j) and (k,l) with color rgb
  % should precede drawbases
  gsave
  setrgbcolor
  newpath
  currentdict (cpr) known
  {
    dup 1 sub coor exch get aload pop moveto % move to l
    dup 1 sub 4 -1 roll dup 5 1 roll 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from l to j
    3 -1 roll 4 -1 roll dup 5 1 roll arccoords curveto % curve from j to i
    exch dup 4 -1 roll 1 sub exch 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from i to k
    exch arccoords curveto% curve from k to l
  }
  {  exch 4 3 roll exch 1 sub exch 1 sub dup
     coor exch get aload pop moveto
     exch 1 exch { coor exch get aload pop lineto } for
     exch 1 sub exch 1 sub dup
     coor exch get aload pop lineto
     exch 1 exch { coor exch get aload pop lineto } for
  } ifelse
    closepath fill stroke
   grestore
} bind def
/hsb {
  dup 0.3 mul 1 exch sub sethsbcolor
} bind def
/colorpair { % i j hue sat colorpair
  % draw basepair i,j in color
  % 1 index 0.00 ne {
  gsave
  newpath
  hsb
  fsize setlinewidth
  currentdict (cpr) known
  {
    exch dup
    coor  exch 1 sub get aload pop moveto
    exch arccoords curveto
  }
  { 1 sub coor exch get aload pop moveto
    1 sub coor exch get aload pop lineto
  } ifelse
   stroke
   grestore
   % } if
} bind def

%%EndProlog

% data start here
/sequence { (\
_____AUGUAG_UUCCCACGUCAG_AA_ACGCAACACUAC_CACACUUUGUGGGUAUAAGCACCUUAAUUUCCCUAACUUGGCGUCGUGACCUAUUCGCGGAGCAUACUUGACGUCUUAC\
) } def
/len { sequence length } bind def

/coor [
[130.86189270 253.55191040]
[120.49760437 255.27554321]
[110.04106903 256.30041504]
[99.53934479 256.62194824]
[89.03969574 256.23864746]
[78.58937073 255.15228271]
[68.23539734 253.36772156]
[58.02436447 250.89297485]
[48.00222397 247.73922729]
[38.21407700 243.92062378]
[28.70397186 239.45437622]
[19.51470184 234.36056519]
[10.68762207 228.66213989]
[2.26245308 222.38471985]
[-5.72289038 215.55654907]
[-13.23247337 208.20837402]
[-20.23250389 200.37326050]
[-26.69148064 192.08645630]
[-32.58033752 183.38525391]
[-37.87257004 174.30880737]
[-42.54437256 164.89797974]
[-46.57471466 155.19509888]
[-49.94545746 145.24383545]
[-52.64144135 135.08898926]
[-54.65052414 124.77622223]
[-55.96367264 114.35195923]
[-56.57497406 103.86312103]
[-56.48167801 93.35689545]
[-55.68420029 82.88056183]
[-54.18613815 72.48126984]
[-51.99422836 62.20581055]
[-49.11833191 52.10042953]
[-45.57139587 42.21059799]
[-41.36937714 32.58082199]
[-36.53118515 23.25444031]
[-31.07859802 14.27341747]
[-25.03614807 5.67816877]
[-18.43102455 -2.49262476]
[-11.29295635 -10.20219517]
[-3.65406179 -17.41584778]
[4.45128298 -24.10112190]
[12.98660278 -30.22793388]
[21.91348839 -35.76871109]
[31.19176865 -40.69852066]
[40.77968979 -44.99517441]
[50.63410950 -48.63934326]
[60.71067429 -51.61462784]
[70.96405029 -53.90763092]
[81.34808350 -55.50804520]
[91.81605530 -56.40866089]
[102.32085419 -56.60542679]
[112.81520844 -56.09745789]
[114.75701141 -70.97123718]
[116.69881439 -85.84502411]
[104.58543396 -100.28713989]
[106.71263885 -118.69823456]
[121.29434204 -129.61849976]
[122.46152496 -144.57301331]
[123.62870026 -159.52754211]
[124.79588318 -174.48205566]
[120.00035095 -190.74365234]
[134.29888916 -199.85342407]
[147.01087952 -188.63551331]
[139.75039673 -173.31488037]
[138.58322144 -158.36035156]
[137.41604614 -143.40583801]
[136.24887085 -128.45132446]
[145.46797180 -121.49373627]
[150.18136597 -110.81735229]
[149.08866882 -99.07691956]
[142.34947205 -89.25476074]
[131.57258606 -83.90322113]
[129.63078308 -69.02943420]
[127.68898773 -54.15565491]
[155.24340820 -46.55651474]
[180.95794678 -34.07630539]
[203.97619629 -17.13068771]
[223.53149414 3.71596837]
[238.97259521 27.76936531]
[249.78520203 54.22840118]
[255.60922241 82.21186066]
[256.25067139 110.78775787]
[271.14840698 112.53631592]
[285.75643921 106.46045685]
[297.49499512 115.62863159]
[312.39273071 117.37718964]
[327.29046631 119.12574768]
[342.18820190 120.87429810]
[357.08593750 122.62285614]
[371.98367310 124.37141418]
[385.41348267 115.59533691]
[400.60247803 120.76001740]
[405.89895630 135.90356445]
[397.23992920 149.40913391]
[381.26782227 150.91641235]
[370.23510742 139.26914978]
[355.33737183 137.52059937]
[340.43963623 135.77203369]
[325.54190063 134.02348328]
[310.64416504 132.27491760]
[295.74642944 130.52636719]
[282.20397949 136.72729492]
[269.39984131 127.43405151]
[254.50210571 125.68549347]
[252.43238831 135.98626709]
[249.67672729 146.12509155]
[246.24749756 156.05635071]
[242.16015625 165.73535156]
[237.43307495 175.11854553]
[232.08753967 184.16369629]
[226.14761353 192.83009338]
[219.63999939 201.07876587]
[212.59399414 208.87257385]
[205.04132080 216.17645264]
[197.01594543 222.95751953]
[188.55400085 229.18527222]
[179.69355774 234.83168030]
[170.47448730 239.87135315]
[160.93826294 244.28157043]
[151.12782288 248.04252625]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[52 74]
[53 73]
[54 72]
[57 67]
[58 66]
[59 65]
[60 64]
[82 104]
[83 103]
[85 101]
[86 100]
[87 99]
[88 98]
[89 97]
[90 96]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
% Start Annotations
52 74 1 gmark
53 73 1 gmark
54 72 1 gmark
57 67 1 gmark
58 66 1 gmark
59 65 1 gmark
60 64 1 gmark
101 cmark
86 100 1 gmark
97 cmark
90 cmark

% End Annotations
showpage
end
%%EOF
